var search_data = {"index":{"searchIndex":["aux","moviedata","movietest","array_mean()","hash_sim()","load_file()","mean()","most_similar()","movies()","new()","new()","popularity()","popularity_list()","predict()","rating()","rms()","run_test()","similarity()","stddev()","test()","to_a()","top_sim_user()","viewers()"],"longSearchIndex":["aux","moviedata","movietest","aux::array_mean()","moviedata#hash_sim()","aux::load_file()","movietest#mean()","moviedata#most_similar()","moviedata#movies()","moviedata::new()","movietest::new()","moviedata#popularity()","moviedata#popularity_list()","moviedata#predict()","moviedata#rating()","movietest#rms()","moviedata#run_test()","moviedata#similarity()","movietest#stddev()","movietest#test()","movietest#to_a()","moviedata#top_sim_user()","moviedata#viewers()"],"info":[["Aux","","Aux.html","",""],["MovieData","","MovieData.html","",""],["MovieTest","","MovieTest.html","",""],["array_mean","Aux","Aux.html#method-c-array_mean","(arr)","<p>return the mean of an array\n"],["hash_sim","MovieData","MovieData.html#method-i-hash_sim","(hsh1, hsh2)","<p>Return similarity of 2 hashes using cosine similarity cosine similarity of\nvector A, B = (A·B)/(|A||B|) …\n"],["load_file","Aux","Aux.html#method-c-load_file","(file_path, relation, rows = nil)","<p>load the file, format depending on relation um(user-movie) relation: load\nthe file into um_hsh – {user …\n"],["mean","MovieTest","MovieTest.html#method-i-mean","()","<p>returns the average predication error\n"],["most_similar","MovieData","MovieData.html#method-i-most_similar","(u, save = nil)","<p>Return a list of users whose tastes are most similar to the tastes of user\nu u is not in this list The …\n"],["movies","MovieData","MovieData.html#method-i-movies","(u)","<p>returns the array of movies that user u has watched\n"],["new","MovieData","MovieData.html#method-c-new","(dir, indicator)",""],["new","MovieTest","MovieTest.html#method-c-new","(dir, indicator, rows = nil)",""],["popularity","MovieData","MovieData.html#method-i-popularity","(movie_id)","<p>Return a number that indicates the popularity (higher numbers are more\npopular).  Define popularity: …\n"],["popularity_list","MovieData","MovieData.html#method-i-popularity_list","()","<p>Return a list of all movie_id’s ordered by decreasing popularity Result\nstored in “./popularity_list” …\n"],["predict","MovieData","MovieData.html#method-i-predict","(u, m, sim_users)","<p>returns a floating point number between 1.0 and 5.0 as an estimate of what\nuser u would rate movie m. …\n"],["rating","MovieData","MovieData.html#method-i-rating","(u ,m)","<p>return the rating of a user on a certain movie\n"],["rms","MovieTest","MovieTest.html#method-i-rms","()","<p>returns the root mean square error of the prediction\n"],["run_test","MovieData","MovieData.html#method-i-run_test","(rows = nil)","<p>run the test rows specifies how many rows in the test file to run\n"],["similarity","MovieData","MovieData.html#method-i-similarity","(user1, user2)","<p>Generate a number which indicates the similarity in movie preference\nbetween user1 and user2 (where larger …\n"],["stddev","MovieTest","MovieTest.html#method-i-stddev","()","<p>returns the standard deviation of the error\n"],["test","MovieTest","MovieTest.html#method-i-test","()","<p>Predicting the rating of a user in test set based on the base set. For each\niterate, will have to go …\n"],["to_a","MovieTest","MovieTest.html#method-i-to_a","()","<p>returns an array of the predictions in the form [u,m,r,p].\n"],["top_sim_user","MovieData","MovieData.html#method-i-top_sim_user","(u)","<p>Filter users 98% or more similar to u and return them in an array Lower the\nshreshould, longer it takes …\n"],["viewers","MovieData","MovieData.html#method-i-viewers","(m)","<p>returns the array of users that have seen movie m\n"]]}}